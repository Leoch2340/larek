{"version":3,"file":"main.js","mappings":"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","sources":["webpack://my-webpack-project/./src/components/LarekAPI.ts","webpack://my-webpack-project/./src/components/base/api.ts","webpack://my-webpack-project/./src/utils/constants.ts","webpack://my-webpack-project/./src/components/base/events.ts","webpack://my-webpack-project/./src/components/base/Model.ts","webpack://my-webpack-project/./src/components/AppData.ts","webpack://my-webpack-project/./src/components/base/Component.ts","webpack://my-webpack-project/./src/utils/utils.ts","webpack://my-webpack-project/./src/components/Page.ts","webpack://my-webpack-project/./src/components/common/Modal.ts","webpack://my-webpack-project/./src/components/Card.ts","webpack://my-webpack-project/./src/components/Basket.ts","webpack://my-webpack-project/./src/components/common/Form.ts","webpack://my-webpack-project/./src/components/Order.ts","webpack://my-webpack-project/./src/components/Success.ts","webpack://my-webpack-project/./src/index.ts"],"sourcesContent":["/*\nЭтот класс LarekAPI реализует взаимодействие с API интернет-магазина, позволяя\nполучать товары и оформлять заказы.*/\n// Импортируем базовый класс API\nimport { Api } from \"./base/api\";\n// Создаём класс LarekAPI, который наследуется от базового API и реализует интерфейс ILarekAPI\nexport class LarekAPI extends Api {\n    // Конструктор принимает URL для CDN, базовый URL API и дополнительные опции\n    constructor(cdn, baseUrl, options) {\n        super(baseUrl, options); // Вызываем конструктор родительского класса\n        this.cdn = cdn; // Сохраняем адрес CDN\n    }\n    // Метод получения списка товаров\n    getProductList() {\n        return this.get('/product') // Делаем GET-запрос к API\n            .then((data) => // Обрабатываем ответ\n         data.items.map((item) => (Object.assign(Object.assign({}, item), { image: this.cdn + item.image // Добавляем полный путь к изображению товара\n         }))));\n    }\n    // Метод получения конкретного товара по его ID\n    getProductItem(id) {\n        return this.get(`/product/${id}`) // Делаем GET-запрос к API с ID товара\n            .then((item) => (Object.assign(Object.assign({}, item), { image: this.cdn + item.image // Добавляем полный путь к изображению товара\n         })));\n    }\n    // Метод для оформления заказа\n    orderProducts(order) {\n        return this.post(`/order`, order) // Делаем POST-запрос на оформление заказа\n            .then((data) => data); // Возвращаем полученные данные\n    }\n}\n","/* Этот код определяет класс Api, который упрощает взаимодействие с API с\nпомощью методов GET и POST\n*/\n// Создаём класс для работы с API\nexport class Api {\n    // Конструктор класса, принимающий базовый URL и опциональные настройки запросов\n    constructor(baseUrl, options = {}) {\n        var _a;\n        this.baseUrl = baseUrl;\n        this.options = {\n            headers: Object.assign({ 'Content-Type': 'application/json' }, ((_a = options.headers) !== null && _a !== void 0 ? _a : {}) // Объединяем переданные заголовки с дефолтными\n            )\n        };\n    }\n    // Обрабатывает ответ от сервера: если ответ успешный, возвращает JSON, иначе выбрасывает ошибку\n    handleResponse(response) {\n        if (response.ok)\n            return response.json(); // Если статус ответа 200-299, парсим JSON\n        else\n            return response.json() // Иначе тоже парсим JSON, но отклоняем промис с ошибкой\n                .then(data => { var _a; return Promise.reject((_a = data.error) !== null && _a !== void 0 ? _a : response.statusText); });\n    }\n    // Выполняет GET-запрос\n    get(uri) {\n        return fetch(this.baseUrl + uri, Object.assign(Object.assign({}, this.options), { method: 'GET' // Указываем метод запроса\n         })).then(this.handleResponse); // Обрабатываем ответ\n    }\n    // Выполняет POST (или другой переданный метод: PUT, PATCH и т. д.)\n    post(uri, data, method = 'POST') {\n        return fetch(this.baseUrl + uri, Object.assign(Object.assign({}, this.options), { // Добавляем стандартные опции\n            method, body: JSON.stringify(data) // Преобразуем объект в строку JSON\n         })).then(this.handleResponse); // Обрабатываем ответ\n    }\n}\n","/*\nЭтот файл содержит глобальные настройки интернет-магазина, включая адреса API/CDN,\nкатегории товаров и способы оплаты.\n*/\n// Базовый URL API сервера\nexport const API_URL = `https://larek-api.nomoreparties.co/api/weblarek`;\n// URL для загрузки медиа-контента через CDN\nexport const CDN_URL = `https://larek-api.nomoreparties.co/content/weblarek`;\n// Объект для хранения глобальных настроек (пока пустой)\nexport const settings = {};\n// Сопоставление категорий товаров с CSS-классами карточек\nexport const categoryClasses = {\n    \"софт-скил\": \"card__category_soft\",\n    \"хард-скил\": \"card__category_hard\",\n    \"кнопка\": \"card__category_button\",\n    \"дополнительное\": \"card__category_additional\",\n    \"другое\": \"card__category_other\" // Категория \"Другое\" (не попавшее в другие категории)\n};\n// Способы оплаты и их соответствие API-значениям\nexport const PaymentMethods = {\n    \"card\": \"online\",\n    \"cash\": \"cash\" // Оплата наличными\n};\n","/*\nЭтот код представляет собой класс EventEmitter, реализующий механизм подписки и\nобработки событий.\n*/\n/**\n * Брокер событий, классическая реализация\n * В расширенных вариантах есть возможность подписаться на все события\n * или слушать события по шаблону например\n */\nexport class EventEmitter {\n    constructor() {\n        // Инициализируем пустой Map для хранения событий\n        this._events = new Map();\n    }\n    /**\n     * Установить обработчик на событие\n     * @param eventName - имя события\n     * @param callback - функция, вызываемая при возникновении события\n     */\n    on(eventName, callback) {\n        var _a;\n        // Если события с таким именем еще нет, создаем новый Set для обработчиков\n        if (!this._events.has(eventName)) {\n            this._events.set(eventName, new Set());\n        }\n        // Добавляем обработчик в список подписчиков на это событие\n        (_a = this._events.get(eventName)) === null || _a === void 0 ? void 0 : _a.add(callback);\n    }\n    /**\n     * Снять обработчик с события\n     * @param eventName - имя события\n     * @param callback - функция, которую нужно удалить из подписчиков\n     */\n    off(eventName, callback) {\n        var _a;\n        // Проверяем, есть ли обработчики для данного события\n        if (this._events.has(eventName)) {\n            // Удаляем переданный обработчик из множества подписчиков\n            this._events.get(eventName).delete(callback);\n            // Если обработчиков не осталось, удаляем событие из Map\n            if (((_a = this._events.get(eventName)) === null || _a === void 0 ? void 0 : _a.size) === 0) {\n                this._events.delete(eventName);\n            }\n        }\n    }\n    /**\n     * Инициировать событие с данными\n     * @param eventName - имя события\n     * @param data - данные, передаваемые обработчикам события\n     */\n    emit(eventName, data) {\n        // Проходим по всем зарегистрированным событиям\n        this._events.forEach((subscribers, name) => {\n            // Если имя события совпадает или соответствует шаблону (RegExp)\n            if (name instanceof RegExp && name.test(eventName) || name === eventName) {\n                // Вызываем все обработчики, подписанные на это событие\n                subscribers.forEach(callback => callback(data));\n            }\n        });\n    }\n    /**\n     * Слушать все события\n     * @param callback - функция, вызываемая при любом событии\n     */\n    onAll(callback) {\n        // Подписываемся на все события, используя \"*\"\n        this.on(\"*\", callback);\n    }\n    /**\n     * Сбросить все обработчики\n     */\n    offAll() {\n        // Очищаем Map, удаляя все события и их обработчики\n        this._events = new Map();\n    }\n    /**\n     * Сделать коллбек триггером, генерирующим событие при вызове\n     * @param eventName - имя события, которое будет сгенерировано\n     * @param context - дополнительные данные, добавляемые в событие\n     * @returns Функция, вызывающая emit при вызове\n     */\n    trigger(eventName, context) {\n        return (event = {}) => {\n            // При вызове функции создаем событие и объединяем переданные данные\n            this.emit(eventName, Object.assign(Object.assign({}, (event || {})), (context || {}) // Контекст, переданный при создании триггера\n            ));\n        };\n    }\n}\n","/*\nЭтот код определяет абстрактный класс Model<T>, предназначенный для создания модельных\nданных. Модели используются для представления и управления данными в приложении.\n*/\n/**\n * Гарда (type guard) для проверки, является ли объект экземпляром Model\n * @param obj - проверяемый объект\n * @returns true, если объект является экземпляром Model\n */\nexport const isModel = (obj) => {\n    return obj instanceof Model;\n};\n/**\n * Абстрактный класс Model, от которого наследуются конкретные модели данных\n * Позволяет отличать модели от обычных объектов и работать с событиями\n */\nexport class Model {\n    /**\n     * Конструктор принимает частичные данные модели и объект событий\n     * @param data - частичные данные модели\n     * @param events - объект для работы с событиями\n     */\n    constructor(data, events) {\n        this.events = events;\n        // Копируем переданные данные в текущий экземпляр модели\n        Object.assign(this, data);\n    }\n    /**\n     * Метод для уведомления об изменениях в модели\n     * @param event - название события\n     * @param payload - дополнительные данные (опционально)\n     */\n    emitChanges(event, payload) {\n        // Вызываем emit для уведомления подписчиков об изменениях\n        this.events.emit(event, payload !== null && payload !== void 0 ? payload : {});\n    }\n}\n","/*\nКласс Product\n\nКласс предназначен для создания и упрвления данными продукта. Обеспечивает представление\nинформации о продукте, которое может быть использовано для отображения или для обработки\nв бизнес-логике. Наследуется от Model<IProduct>.\n\nconstructor() наследуется от Model\n*/\n/*\nКласс AppData\nКласс предстваляющий состояние приложения, включая данные каталога, предпросмотра,\nкорзины, заказа и ошибок формы. Наследуется от Model<IAppState>.\n*/\n// Импортируем базовую модель\nimport { Model } from \"./base/Model\";\n// Класс Product представляет товар в каталоге и наследуется от Model\nexport class Product extends Model {\n}\n// Класс AppState отвечает за состояние приложения\nexport class AppState extends Model {\n    constructor() {\n        super(...arguments);\n        // Корзина товаров\n        this.basket = [];\n        // Заказ пользователя\n        this.order = {\n            payment: 'online',\n            address: '',\n            email: '',\n            phone: '',\n            total: 0,\n            items: [] // Список товаров в заказе\n        };\n        // Ошибки валидации форм\n        this.formErrors = {};\n    }\n    // Очистка корзины\n    clearBasket() {\n        this.basket = [];\n        this.updateBasket();\n    }\n    // Очистка заказа\n    clearOrder() {\n        this.order = {\n            payment: 'online',\n            address: '',\n            email: '',\n            phone: '',\n            total: 0,\n            items: []\n        };\n    }\n    // Установка каталога товаров\n    setCatalog(items) {\n        // Преобразуем массив товаров в массив объектов Product\n        this.catalog = items.map(item => new Product(item, this.events));\n        // Генерируем событие изменения каталога\n        this.emitChanges('items:changed', { catalog: this.catalog });\n    }\n    // Установка предпросмотра товара\n    setPreview(item) {\n        this.preview = item.id;\n        this.emitChanges('preview:changed', item);\n    }\n    // Добавление товара в корзину\n    addToBasket(item) {\n        if (this.basket.indexOf(item) < 0) {\n            this.basket.push(item);\n            this.updateBasket();\n        }\n    }\n    // Удаление товара из корзины\n    removeFromBasket(item) {\n        this.basket = this.basket.filter((it) => it !== item);\n        this.updateBasket();\n    }\n    // Обновление состояния корзины и генерация событий\n    updateBasket() {\n        this.emitChanges('counter:changed', this.basket);\n        this.emitChanges('basket:changed', this.basket);\n    }\n    // Установка поля доставки\n    setDeliveryField(field, value) {\n        this.order[field] = value;\n        // Если форма валидна, отправляем событие\n        if (this.validateDelivery()) {\n            this.events.emit('delivery:ready', this.order);\n        }\n    }\n    // Установка контактного поля заказа\n    setContactField(field, value) {\n        this.order[field] = value;\n        // Если форма валидна, отправляем событие\n        if (this.validateContact()) {\n            this.events.emit('contact:ready', this.order);\n        }\n    }\n    // Валидация формы доставки\n    validateDelivery() {\n        // Создаем объект ошибок\n        const errors = {};\n        // Проверяем наличие адреса\n        if (!this.order.address) {\n            errors.address = \"Необходимо указать адрес\";\n        }\n        // Обновляем ошибки\n        this.formErrors = errors;\n        // Генерируем событие изменения ошибок формы\n        this.events.emit('formErrors:change', this.formErrors);\n        // Возвращаем true, если ошибок нет\n        return Object.keys(errors).length === 0;\n    }\n    // Валидация контактных данных\n    validateContact() {\n        // Создаем объект ошибок\n        const errors = {};\n        // Проверяем наличие email\n        if (!this.order.email) {\n            errors.email = 'Необходимо указать email';\n        }\n        // Проверяем наличие телефона\n        if (!this.order.phone) {\n            errors.phone = 'Необходимо указать телефон';\n        }\n        // Обновляем ошибки\n        this.formErrors = errors;\n        // Генерируем событие изменения ошибок формы\n        this.events.emit('formErrors:change', this.formErrors);\n        // Возвращаем true, если ошибок нет\n        return Object.keys(errors).length === 0;\n    }\n}\n","/**\n Этот код определяет абстрактный класс Component<T>, который предназначен для\n создания компонентов пользовательского интерфейса\n */\nexport class Component {\n    // Конструктор принимает контейнер — корневой элемент компонента\n    constructor(container) {\n        this.container = container;\n        // Важно: код в конструкторе выполняется ДО объявления свойств в дочернем классе!\n    }\n    // --- Инструменты для работы с DOM ---\n    /**\n     * Переключает класс у элемента (можно передавать `force` для управления состоянием)\n     */\n    toggleClass(element, className, force) {\n        element.classList.toggle(className, force);\n    }\n    /**\n     * Устанавливает текстовое содержимое элемента\n     */\n    setText(element, value) {\n        if (element) {\n            element.textContent = String(value); // Преобразуем любое значение в строку\n        }\n    }\n    /**\n     * Устанавливает/снимает атрибут `disabled`\n     */\n    setDisabled(element, state) {\n        if (element) {\n            if (state)\n                element.setAttribute('disabled', 'disabled');\n            else\n                element.removeAttribute('disabled');\n        }\n    }\n    /**\n     * Скрывает элемент (устанавливает `display: none`)\n     */\n    setHidden(element) {\n        element.style.display = 'none';\n    }\n    /**\n     * Делает элемент видимым (убирает `display: none`)\n     */\n    setVisible(element) {\n        element.style.removeProperty('display'); // Удаляет свойство display\n    }\n    /**\n     * Устанавливает изображение (`src`) и альтернативный текст (`alt`)\n     */\n    setImage(element, src, alt) {\n        if (element) {\n            element.src = src;\n            if (alt) {\n                element.alt = alt;\n            }\n        }\n    }\n    /**\n     * Рендерит компонент: обновляет данные и возвращает корневой `HTMLElement`\n     */\n    render(data) {\n        Object.assign(this, data !== null && data !== void 0 ? data : {}); // Применяем переданные данные\n        return this.container; // Возвращаем корневой элемент компонента\n    }\n}\n","/*\nЭтот набор функций содержит помощники для работы с DOM, обработку различных типов\nданных и утилиты для преобразования данных в удобные форматы, такие как PascalCase в\nkebab-case.\n*/\n// Функция преобразует строку из PascalCase в kebab-case\nexport function pascalToKebab(value) {\n    return value.replace(/([a-z0–9])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\n// Функция проверяет, является ли переданный аргумент строкой-селектором\nexport function isSelector(x) {\n    return (typeof x === \"string\") && x.length > 1;\n}\n// Функция проверяет, является ли значение пустым (null или undefined)\nexport function isEmpty(value) {\n    return value === null || value === undefined;\n}\n// Функция получает все элементы по переданному селектору\nexport function ensureAllElements(selectorElement, context = document) {\n    if (isSelector(selectorElement)) {\n        // Если передан строковый селектор, ищем все соответствующие элементы в контексте\n        return Array.from(context.querySelectorAll(selectorElement));\n    }\n    if (selectorElement instanceof NodeList) {\n        // Если передан NodeList, преобразуем его в массив\n        return Array.from(selectorElement);\n    }\n    if (Array.isArray(selectorElement)) {\n        // Если передан массив, возвращаем его как есть\n        return selectorElement;\n    }\n    throw new Error(`Unknown selector element`);\n}\n// Функция получает один элемент по селектору, выбрасывает ошибку, если найдено несколько или ни одного\nexport function ensureElement(selectorElement, context) {\n    if (isSelector(selectorElement)) {\n        // Если передан селектор, получаем все элементы\n        const elements = ensureAllElements(selectorElement, context);\n        if (elements.length > 1) {\n            console.warn(`selector ${selectorElement} return more than one element`);\n        }\n        if (elements.length === 0) {\n            throw new Error(`selector ${selectorElement} return nothing`);\n        }\n        return elements.pop(); // Возвращаем последний элемент\n    }\n    if (selectorElement instanceof HTMLElement) {\n        // Если передан сам элемент, возвращаем его\n        return selectorElement;\n    }\n    throw new Error('Unknown selector element');\n}\n// Функция клонирует содержимое HTML-шаблона\nexport function cloneTemplate(query) {\n    const template = ensureElement(query);\n    return template.content.firstElementChild.cloneNode(true);\n}\n// Функция для работы с BEM-именованием классов\nexport function bem(block, element, modifier) {\n    let name = block;\n    if (element)\n        name += `__${element}`;\n    if (modifier)\n        name += `_${modifier}`;\n    return {\n        name,\n        class: `.${name}`\n    };\n}\n// Функция получает список свойств объекта, фильтруя их\nexport function getObjectProperties(obj, filter) {\n    return Object.entries(Object.getOwnPropertyDescriptors(Object.getPrototypeOf(obj)))\n        .filter(([name, prop]) => filter ? filter(name, prop) : (name !== 'constructor'))\n        .map(([name]) => name);\n}\n/**\n * Устанавливает dataset-атрибуты элемента\n */\nexport function setElementData(el, data) {\n    for (const key in data) {\n        el.dataset[key] = String(data[key]);\n    }\n}\n/**\n * Получает типизированные данные из dataset-атрибутов элемента\n */\nexport function getElementData(el, scheme) {\n    const data = {};\n    for (const key in el.dataset) {\n        data[key] = scheme[key](el.dataset[key]);\n    }\n    return data;\n}\n/**\n * Проверка на простой объект ({} или null-прототип)\n */\nexport function isPlainObject(obj) {\n    const prototype = Object.getPrototypeOf(obj);\n    return prototype === Object.getPrototypeOf({}) || prototype === null;\n}\n// Функция проверяет, является ли значение булевым\nexport function isBoolean(v) {\n    return typeof v === 'boolean';\n}\n/**\n * Фабрика DOM-элементов (упрощённая версия)\n */\nexport function createElement(tagName, props, children) {\n    const element = document.createElement(tagName);\n    if (props) {\n        for (const key in props) {\n            const value = props[key];\n            if (isPlainObject(value) && key === 'dataset') {\n                // Если свойство dataset, записываем его через setElementData\n                setElementData(element, value);\n            }\n            else {\n                // @ts-expect-error fix indexing later\n                element[key] = isBoolean(value) ? value : String(value);\n            }\n        }\n    }\n    if (children) {\n        // Добавляем дочерние элементы\n        for (const child of Array.isArray(children) ? children : [children]) {\n            element.append(child);\n        }\n    }\n    return element;\n}\n","/*\nЭтот класс Page. Класс, предназначенный для управления и отоброжения основных элементов\nстраницы, таких как каталог продуктов, счетчик товаров в корзине, а так же позволяющий\nблокировать прокрутку страницы. Наследуется от Component<IPage>\n\n*/\n// Импортируем базовый класс Component\nimport { Component } from \"./base/Component\";\n// Импортируем утилиту для поиска элементов\nimport { ensureElement } from \"../utils/utils\";\n// Определяем класс Page, наследующийся от Component с типом IPage\nexport class Page extends Component {\n    // Конструктор принимает контейнер страницы и объект событий\n    constructor(container, events) {\n        super(container); // Вызываем конструктор родительского класса\n        this.events = events;\n        // Находим элементы страницы и сохраняем ссылки на них\n        this._counter = ensureElement('.header__basket-counter');\n        this._catalog = ensureElement('.gallery');\n        this._wrapper = ensureElement('.page__wrapper');\n        this._basket = ensureElement('.header__basket');\n        // Добавляем обработчик клика на кнопку корзины\n        this._basket.addEventListener('click', () => {\n            this.events.emit('basket:open'); // Генерируем событие \"basket:open\"\n        });\n    }\n    // Сеттер для обновления счетчика товаров в корзине\n    set counter(value) {\n        this.setText(this._counter, String(value)); // Устанавливаем текст счетчика\n    }\n    // Сеттер для обновления списка товаров в каталоге\n    set catalog(items) {\n        this._catalog.replaceChildren(...items); // Заменяем содержимое каталога новыми элементами\n    }\n    // Сеттер для блокировки/разблокировки страницы\n    set locked(value) {\n        if (value) {\n            this._wrapper.classList.add('page__wrapper_locked'); // Добавляем класс блокировки\n        }\n        else {\n            this._wrapper.classList.remove('page__wrapper_locked'); // Удаляем класс блокировки\n        }\n    }\n}\n","/*\nЭтот код определяет класс Modal. Класс для создания и управления модальными окнами.\nПозволяет открывать и закрывать модальное окно, а так же управлять его содержимым.\nНаследуется от Component<IModalData>.\n*/\n// Импортируем базовый класс компонента\nimport { Component } from \"../base/Component\";\n// Импортируем утилиту для безопасного получения элементов DOM\nimport { ensureElement } from \"../../utils/utils\";\n// Определяем класс Modal, который наследуется от Component\nexport class Modal extends Component {\n    // Конструктор принимает контейнер модального окна и объект событий\n    constructor(container, events) {\n        // Вызываем конструктор родительского класса\n        super(container);\n        this.events = events;\n        // Получаем кнопку закрытия модального окна\n        this._closeButton = ensureElement('.modal__close', container);\n        // Получаем контейнер для содержимого модального окна\n        this._content = ensureElement('.modal__content', container);\n        // Добавляем обработчик клика по кнопке закрытия\n        this._closeButton.addEventListener('click', this.close.bind(this));\n        // Добавляем обработчик клика по самому модальному окну (чтобы закрывать при клике вне контента)\n        this.container.addEventListener('mousedown', this.close.bind(this));\n        // Останавливаем всплытие события клика внутри контента, чтобы не закрывать модальное окно при клике внутри него\n        this._content.addEventListener('mousedown', (event) => event.stopPropagation());\n    }\n    // Сеттер для обновления содержимого модального окна\n    set content(value) {\n        // Очищаем содержимое и вставляем новый элемент\n        this._content.replaceChildren(value);\n    }\n    // Метод для открытия модального окна\n    open() {\n        // Добавляем класс, активирующий модальное окно\n        this.container.classList.add('modal_active');\n        // Вызываем событие открытия модального окна\n        this.events.emit('modal:open');\n    }\n    // Метод для закрытия модального окна\n    close() {\n        // Убираем класс, деактивирующий модальное окно\n        this.container.classList.remove('modal_active');\n        // Очищаем содержимое модального окна\n        this.content = null;\n        // Вызываем событие закрытия модального окна\n        this.events.emit('modal:close');\n    }\n    // Метод рендера модального окна\n    render(data) {\n        // Вызываем родительский метод render\n        super.render(data);\n        // Открываем модальное окно после рендера\n        this.open();\n        // Возвращаем контейнер модального окна\n        return this.container;\n    }\n}\n","/*\nКласс Card\n\nКласс предназначенный для отображения и управления карточками товара(в каталоге, на\nпревью и в корзине), а так-же обработку событий пользователя. Реализует интерфейс IProduct.\nНаследуется от Component<ICard>\n*/\n// Импортируем базовый компонент\nimport { Component } from \"./base/Component\";\n// Импортируем вспомогательную функцию для поиска элементов\nimport { ensureElement } from \"../utils/utils\";\n// Импортируем объект с классами категорий\nimport { categoryClasses } from \"../utils/constants\";\n// Определяем класс карточки товара, наследуемый от Component\nexport class Card extends Component {\n    // Конструктор принимает контейнер карточки и объект действий (обработчиков событий)\n    constructor(container, actions) {\n        // Вызываем конструктор родительского класса\n        super(container);\n        // Находим заголовок карточки\n        this._title = ensureElement('.card__title', container);\n        // Находим цену товара\n        this._price = ensureElement('.card__price', container);\n        // Находим изображение товара\n        this._image = container.querySelector('.card__image');\n        // Находим кнопку добавления в корзину\n        this._button = container.querySelector('.card__button');\n        // Находим описание товара\n        this._description = container.querySelector('.card__text');\n        // Находим элемент категории товара\n        this._category = container.querySelector('.card__category');\n        // Находим индекс товара (например, его позицию в корзине)\n        this._index = container.querySelector('.basket__item-index');\n        // Если передан обработчик клика\n        if (actions === null || actions === void 0 ? void 0 : actions.onClick) {\n            // Если есть кнопка, вешаем обработчик на неё\n            if (this._button) {\n                this._button.addEventListener('click', actions.onClick);\n            }\n            else {\n                // Иначе вешаем обработчик клика на всю карточку\n                container.addEventListener('click', actions.onClick);\n            }\n        }\n    }\n    // Метод для отключения кнопки, если у товара нет цены\n    disablePriceButton(value) {\n        if (!value) {\n            if (this._button) {\n                this._button.disabled = true;\n            }\n        }\n    }\n    // Сеттер и геттер для ID товара\n    set id(value) {\n        this.container.dataset.id = value;\n    }\n    get id() {\n        return this.container.dataset.id || '';\n    }\n    // Сеттер и геттер для заголовка товара\n    set title(value) {\n        this.setText(this._title, value);\n    }\n    get title() {\n        return this._title.textContent || '';\n    }\n    // Сеттер и геттер для цены товара\n    set price(value) {\n        this.setText(this._price, value ? `${value.toString()} синапсов` : '');\n        this.disablePriceButton(value);\n    }\n    get price() {\n        return Number(this._price.textContent || '');\n    }\n    // Сеттер и геттер для категории товара\n    set category(value) {\n        this.setText(this._category, value);\n        this._category.classList.add(categoryClasses[value]); // Добавляем класс в зависимости от категории\n    }\n    get category() {\n        return this._category.textContent || '';\n    }\n    // Сеттер и геттер для индекса товара\n    set index(value) {\n        this._index.textContent = value;\n    }\n    get index() {\n        return this._index.textContent || '';\n    }\n    // Сеттер для изображения товара\n    set image(value) {\n        this.setImage(this._image, value, this.title);\n    }\n    // Сеттер для описания товара\n    set description(value) {\n        this.setText(this._description, value);\n    }\n    // Сеттер для текста на кнопке\n    set buttonTitle(value) {\n        if (this._button) {\n            this._button.textContent = value;\n        }\n    }\n}\n","/*\nКласс Basket\nКласс для отображения и управления компонентом корзины покупок.\nОбеспечивает отображение товаров, управление их выбором и общей стоимостью.\n*/\n// Импортируем базовый компонент\nimport { Component } from \"./base/Component\";\n// Импортируем вспомогательные функции\nimport { createElement, ensureElement } from \"./../utils/utils\";\n// Определяем класс корзины, наследуемый от Component\nexport class Basket extends Component {\n    // Конструктор класса, принимает контейнер и объект событий\n    constructor(container, events) {\n        // Вызываем конструктор родительского класса\n        super(container);\n        this.events = events;\n        // Находим элемент списка товаров внутри контейнера\n        this._list = ensureElement('.basket__list', this.container);\n        // Находим элемент для отображения суммы\n        this._total = this.container.querySelector('.basket__price');\n        // Находим кнопку оформления заказа\n        this._button = this.container.querySelector('.basket__button');\n        // Добавляем обработчик клика на кнопку оформления заказа\n        if (this._button) {\n            this._button.addEventListener('click', () => {\n                // При клике вызываем событие открытия заказа\n                events.emit('order:open');\n            });\n        }\n        // Инициализируем список товаров пустым массивом\n        this.items = [];\n        // Отключаем кнопку оформления заказа по умолчанию\n        this._button.disabled = true;\n    }\n    // Метод для включения/отключения кнопки\n    toggleButton(isDisabled) {\n        this._button.disabled = isDisabled;\n    }\n    // Сеттер для списка товаров в корзине\n    set items(items) {\n        // Если в корзине есть товары\n        if (items.length) {\n            // Заменяем содержимое списка на переданные элементы\n            this._list.replaceChildren(...items);\n        }\n        else {\n            // Если товаров нет, отображаем сообщение \"Корзина пуста\"\n            this._list.replaceChildren(createElement('p', {\n                textContent: 'Корзина пуста'\n            }));\n        }\n    }\n    // Сеттер для отображения общей суммы товаров в корзине\n    set total(total) {\n        // Устанавливаем текстовое содержимое элемента с суммой\n        this.setText(this._total, `${total.toString()} синапсов`);\n    }\n}\n","/* Валидация*/\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n// Импорт базового класса Component из файла \"../base/Component\"\nimport { Component } from \"../base/Component\";\n// Импорт утилиты ensureElement для безопасного получения DOM-элементов\nimport { ensureElement } from \"../../utils/utils\";\n// Объявление класса Form с generic-параметром T, наследующегося от Component<IFormState>\nexport class Form extends Component {\n    // Конструктор класса, принимающий контейнер формы и объект событий\n    constructor(container, events) {\n        // Вызов конструктора родительского класса\n        super(container);\n        this.container = container;\n        this.events = events;\n        // Флаг валидности формы, по умолчанию false\n        this._isFormValid = false;\n        // Инициализация кнопки отправки формы\n        this._submit = ensureElement('button[type=submit]', this.container);\n        // Инициализация элемента для отображения ошибок\n        this._errors = ensureElement('.form__errors', this.container);\n        // Поиск поля email в форме\n        this._emailInput = this.container.querySelector('input[name=\"email\"]');\n        // Поиск поля телефона в форме\n        this._phoneInput = this.container.querySelector('input[name=\"phone\"]');\n        // Добавление обработчика события input (ввод данных)\n        this.container.addEventListener('input', (e) => {\n            // Приведение цели события к HTMLInputElement\n            const target = e.target;\n            // Получение имени поля как ключа generic-типа T\n            const field = target.name;\n            // Получение значения поля\n            const value = target.value;\n            // Вызов обработчика изменения поля\n            this.onInputChange(field, value);\n            // Валидация формы при изменении\n            this.validateForm();\n        });\n        // Добавление обработчика события submit (отправка формы)\n        this.container.addEventListener('submit', (e) => {\n            // Отмена стандартного поведения формы\n            e.preventDefault();\n            // Принудительная валидация перед отправкой\n            this.validateForm(true);\n            // Если форма валидна - эмитим событие submit\n            if (this._isFormValid) {\n                this.events.emit(`${this.container.name}:submit`);\n            }\n        });\n    }\n    // Метод валидации email\n    validateEmail(email) {\n        // Регулярное выражение для проверки email\n        const re = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        // Проверка соответствия строки регулярному выражению\n        return re.test(email);\n    }\n    // Метод валидации телефона\n    validatePhone(phone) {\n        // Удаление всех нецифровых символов\n        const cleaned = phone.replace(/\\D/g, '');\n        // Проверка что осталось минимум 10 цифр\n        return cleaned.length >= 10;\n    }\n    // Основной метод валидации формы\n    validateForm(forceValidation = false) {\n        // Флаг общей валидности\n        let isValid = true;\n        // Сообщение об ошибке\n        let errorMessage = '';\n        // Флаг валидности email\n        let emailValid = true;\n        // Флаг валидности телефона\n        let phoneValid = true;\n        // Валидация email, если поле существует\n        if (this._emailInput) {\n            // Получение и очистка значения email\n            const email = this._emailInput.value.trim();\n            // Проверка на пустое значение\n            if (!email) {\n                // Если включена принудительная валидация\n                if (forceValidation) {\n                    isValid = false;\n                    errorMessage = 'Пожалуйста, введите email';\n                    // Добавление класса ошибки\n                    this._emailInput.classList.add('form__input_error');\n                }\n                emailValid = false;\n            }\n            else if (!this.validateEmail(email)) {\n                // Если email не прошел валидацию\n                isValid = false;\n                errorMessage = 'Пожалуйста, введите корректный email';\n                this._emailInput.classList.add('form__input_error');\n                emailValid = false;\n            }\n            else {\n                // Успешная валидация - удаление класса ошибки\n                this._emailInput.classList.remove('form__input_error');\n                emailValid = true;\n            }\n        }\n        // Валидация телефона, если поле существует\n        if (this._phoneInput) {\n            // Получение и очистка значения телефона\n            const phone = this._phoneInput.value.trim();\n            // Проверка на пустое значение\n            if (!phone) {\n                if (forceValidation) {\n                    isValid = false;\n                    // Формирование составного сообщения об ошибке\n                    errorMessage = errorMessage\n                        ? `${errorMessage} и номер телефона`\n                        : 'Пожалуйста, введите номер телефона';\n                    this._phoneInput.classList.add('form__input_error');\n                }\n                phoneValid = false;\n            }\n            else if (!this.validatePhone(phone)) {\n                // Если телефон не прошел валидацию\n                isValid = false;\n                errorMessage = errorMessage\n                    ? `${errorMessage}`\n                    : 'Пожалуйста, введите корректный номер телефона';\n                this._phoneInput.classList.add('form__input_error');\n                phoneValid = false;\n            }\n            else {\n                // Успешная валидация - удаление класса ошибки\n                this._phoneInput.classList.remove('form__input_error');\n                phoneValid = true;\n            }\n        }\n        // Обновление состояния валидности формы\n        this._isFormValid = isValid && emailValid && phoneValid;\n        // Установка свойства valid\n        this.valid = this._isFormValid;\n        // Установка сообщения об ошибке\n        this.errors = errorMessage;\n    }\n    // Метод обработки изменения поля формы\n    onInputChange(field, value) {\n        // Генерация события изменения поля\n        this.events.emit(`${this.container.name}.${String(field)}:change`, {\n            field,\n            value\n        });\n    }\n    // Сеттер для свойства valid\n    set valid(value) {\n        // Установка состояния disabled кнопки отправки\n        this._submit.disabled = !value;\n    }\n    // Сеттер для сообщений об ошибках\n    set errors(value) {\n        // Установка текста ошибки в элемент\n        this.setText(this._errors, value);\n    }\n    // Метод рендеринга формы\n    render(state) {\n        // Деструктуризация состояния формы\n        const { valid, errors } = state, inputs = __rest(state, [\"valid\", \"errors\"]);\n        // Вызов родительского метода render\n        super.render({ valid, errors });\n        // Копирование свойств из inputs в текущий объект\n        Object.assign(this, inputs);\n        // Валидация формы при рендере\n        this.validateForm();\n        // Возврат контейнера формы\n        return this.container;\n    }\n}\n","/*\nКласс DeliveryForm для отображения и управления формой доставки, включая метод оплаты\nи ввод адреса доставки. Наследуется от Form<IDeliveryForm>.\n*/\n/*\nКласс ContactForm\nКласс для отображения и управления формой контактных данных, включая ввод телефона и\nэлектронной почты. Наследуется от Form<IContactForm>.\n*/\n// Импортируем базовый класс Form\nimport { Form } from \"./common/Form\";\n// Импортируем утилиту для поиска элементов\nimport { ensureElement } from \"../utils/utils\";\n// Класс формы доставки, наследуется от Form с типизацией IDeliveryForm\nexport class DeliveryForm extends Form {\n    // Конструктор принимает контейнер формы, события и необязательные действия\n    constructor(container, events, actions) {\n        super(container, events); // Вызываем конструктор родительского класса\n        // Получаем кнопки выбора оплаты\n        this._cardButton = ensureElement('button[name=\"card\"]', this.container);\n        this._cashButton = ensureElement('button[name=\"cash\"]', this.container);\n        // Устанавливаем начальное активное состояние для кнопки \"Картой\"\n        this._cardButton.classList.add('button_alt-active');\n        // Если переданы действия, добавляем обработчики кликов\n        if (actions === null || actions === void 0 ? void 0 : actions.onClick) {\n            this._cardButton.addEventListener('click', actions.onClick);\n            this._cashButton.addEventListener('click', actions.onClick);\n        }\n    }\n    // Метод переключения активной кнопки оплаты\n    toggleButtons(target) {\n        this._cardButton.classList.toggle('button_alt-active');\n        this._cashButton.classList.toggle('button_alt-active');\n    }\n    // Сеттер для адреса доставки\n    set address(value) {\n        this.container.elements.namedItem('address').value = value;\n    }\n}\n// Класс формы контактов, наследуется от Form с типизацией IContactForm\nexport class ContactForm extends Form {\n    // Конструктор принимает контейнер формы и объект событий\n    constructor(container, events) {\n        super(container, events); // Вызываем конструктор родительского класса\n    }\n    // Сеттер для телефона\n    set phone(value) {\n        this.container.elements.namedItem('phone').value = value;\n    }\n    // Сеттер для email\n    set email(value) {\n        this.container.elements.namedItem('email').value = value;\n    }\n}\n","/*\nКласс Success для отоброжения и управления компонентом, отображающим сообщение об успешной\nоперации, например, после оформления заказа. Наследуется от Component<ISuccess>.\n*/\n// Импортируем базовый класс Component\nimport { Component } from \"./base/Component\";\n// Импортируем утилиту для поиска элементов\nimport { ensureElement } from \"./../utils/utils\";\n// Определяем класс Success, наследующийся от Component с типом ISuccess\nexport class Success extends Component {\n    // Конструктор принимает контейнер и объект с действиями (обработчиками событий)\n    constructor(container, actions) {\n        super(container); // Вызываем конструктор родительского класса\n        // Находим элементы в контейнере и сохраняем ссылки на них\n        this._close = ensureElement('.order-success__close', this.container);\n        this._total = ensureElement('.order-success__description', this.container);\n        // Добавляем обработчик клика на кнопку закрытия, если он передан в actions\n        if (actions === null || actions === void 0 ? void 0 : actions.onClick) {\n            this._close.addEventListener('click', actions.onClick);\n        }\n    }\n    // Сеттер для установки общего количества списанных \"синапсов\"\n    set total(value) {\n        this._total.textContent = `Списано ${value} синапсов`; // Устанавливаем текстовое содержимое\n    }\n}\n","/*\nВаш код представляет собой комплексную структуру приложения с обработкой событий,\nAPI-запросами и динамическим обновлением данных на странице.\n*/\n// Импорт стилей\nimport './scss/styles.scss';\n// Импорт классов и утилит\nimport { LarekAPI } from \"./components/LarekAPI\"; // API-клиент\nimport { API_URL, CDN_URL, PaymentMethods } from \"./utils/constants\"; // Константы приложения\nimport { EventEmitter } from \"./components/base/events\"; // Событийный механизм\nimport { AppState } from \"./components/AppData\"; // Управление состоянием\nimport { Page } from \"./components/Page\"; // Класс для работы со страницей\nimport { cloneTemplate, ensureElement } from \"./utils/utils\"; // Утилиты\nimport { Modal } from \"./components/common/Modal\"; // Модальное окно\nimport { Card } from './components/Card'; // Карточка товара\nimport { Basket } from './components/Basket'; // Корзина\nimport { DeliveryForm, ContactForm } from './components/Order'; // Формы доставки и контактов\nimport { Success } from './components/Success'; // Успешное оформление заказа\n// Создаем экземпляры классов\nconst events = new EventEmitter(); // Управление событиями\nconst api = new LarekAPI(CDN_URL, API_URL); // API-клиент\n// Получаем шаблоны из DOM\nconst cardCatalogTemplate = ensureElement('#card-catalog'); // Карточка каталога\nconst cardPreviewTemplate = ensureElement('#card-preview'); // Карточка предпросмотра\nconst cardBasketTemplate = ensureElement('#card-basket'); // Карточка в корзине\nconst basketTemplate = ensureElement('#basket'); // Шаблон корзины\nconst deliveryTemplate = ensureElement('#order'); // Шаблон доставки\nconst contactTemplate = ensureElement('#contacts'); // Шаблон формы контактов\nconst successTemplate = ensureElement('#success'); // Шаблон успешного заказа\n// Создание глобального состояния приложения\nconst appData = new AppState({}, events); // Состояние приложения\n// Создание глобальных элементов страницы\nconst page = new Page(document.body, events); // Главный контейнер страницы\nconst modal = new Modal(ensureElement('#modal-container'), events); // Модальное окно\nconst basket = new Basket(cloneTemplate(basketTemplate), events); // Корзина\nconst delivery = new DeliveryForm(cloneTemplate(deliveryTemplate), events, {\n    onClick: (ev) => events.emit('payment:toggle', ev.target) // Обработчик смены метода оплаты\n});\nconst contact = new ContactForm(cloneTemplate(contactTemplate), events); // Форма контактов\n// Обновление каталога при изменении списка товаров\nevents.on('items:changed', () => {\n    page.catalog = appData.catalog.map(item => {\n        const card = new Card(cloneTemplate(cardCatalogTemplate), {\n            onClick: () => events.emit('card:select', item) // Открытие карточки товара\n        });\n        return card.render({\n            title: item.title,\n            image: item.image,\n            price: item.price,\n            category: item.category\n        });\n    });\n});\n// Открытие товара в модальном окне\nevents.on('card:select', (item) => {\n    appData.setPreview(item);\n});\nevents.on('preview:changed', (item) => {\n    const card = new Card(cloneTemplate(cardPreviewTemplate), {\n        onClick: () => {\n            events.emit('product:toggle', item);\n            card.buttonTitle = (appData.basket.indexOf(item) < 0) ? 'Купить' : 'Удалить из корзины';\n        }\n    });\n    modal.render({\n        content: card.render({\n            title: item.title,\n            description: item.description,\n            image: item.image,\n            price: item.price,\n            category: item.category,\n            buttonTitle: (appData.basket.indexOf(item) < 0) ? 'Купить' : \"Удалить из корзины\"\n        })\n    });\n});\n// Переключение товара (добавление/удаление из корзины)\nevents.on('product:toggle', (item) => {\n    if (appData.basket.indexOf(item) < 0) {\n        events.emit('product:add', item);\n    }\n    else {\n        events.emit('product:delete', item);\n    }\n});\n// Добавление товара в корзину\nevents.on('product:add', (item) => {\n    appData.addToBasket(item);\n});\n// Удаление товара из корзины\nevents.on('product:delete', (item) => appData.removeFromBasket(item));\n// Обновление корзины\nevents.on('basket:changed', (items) => {\n    basket.items = items.map((item, index) => {\n        const card = new Card(cloneTemplate(cardBasketTemplate), {\n            onClick: () => {\n                events.emit('product:delete', item);\n            }\n        });\n        return card.render({\n            index: (index + 1).toString(),\n            title: item.title,\n            price: item.price,\n        });\n    });\n    const total = items.reduce((total, item) => total + item.price, 0);\n    basket.total = total;\n    appData.order.total = total;\n    basket.toggleButton(total === 0);\n});\n// Обновление счетчика товаров в корзине\nevents.on('counter:changed', (item) => {\n    page.counter = appData.basket.length;\n});\n// Открытие корзины\nevents.on('basket:open', () => {\n    modal.render({\n        content: basket.render({})\n    });\n});\n// Открытие формы доставки\nevents.on('order:open', () => {\n    modal.render({\n        content: delivery.render({\n            payment: '',\n            address: '',\n            valid: false,\n            errors: []\n        })\n    });\n    appData.order.items = appData.basket.map((item) => item.id);\n});\n// Смена метода оплаты\nevents.on('payment:toggle', (target) => {\n    if (!target.classList.contains('button_alt-active')) {\n        delivery.toggleButtons(target);\n        appData.order.payment = PaymentMethods[target.getAttribute('name')];\n        console.log(appData.order);\n    }\n});\n// Валидация форм\nevents.on('formErrors:change', (errors) => {\n    const { payment, address, email, phone } = errors;\n    delivery.valid = !payment && !address;\n    contact.valid = !email && !phone;\n    delivery.errors = Object.values({ payment, address }).filter(i => !!i).join('; ');\n    contact.errors = Object.values({ phone, email }).filter(i => !!i).join('; ');\n});\n// Обновление полей доставки\nevents.on(/^order\\..*:change/, (data) => {\n    appData.setDeliveryField(data.field, data.value);\n});\n// Обновление полей контактов\nevents.on(/^contacts\\..*:change/, (data) => {\n    appData.setContactField(data.field, data.value);\n});\n// Проверка заполненности формы доставки\nevents.on('delivery:ready', () => {\n    delivery.valid = true;\n});\n// Проверка заполненности формы контактов\nevents.on('contact:ready', () => {\n    contact.valid = true;\n});\n// Переход к форме контактов\nevents.on('order:submit', () => {\n    modal.render({\n        content: contact.render({\n            email: '',\n            phone: '',\n            valid: false,\n            errors: []\n        })\n    });\n});\n// Оформление заказа\nevents.on('contacts:submit', () => {\n    api.orderProducts(appData.order)\n        .then((result) => {\n        appData.clearBasket();\n        appData.clearOrder();\n        const success = new Success(cloneTemplate(successTemplate), {\n            onClick: () => {\n                modal.close();\n            }\n        });\n        success.total = result.total.toString();\n        modal.render({\n            content: success.render({})\n        });\n    })\n        .catch(err => {\n        console.error(err);\n    });\n});\n// Блокировка страницы при открытии модального окна\nevents.on('modal:open', () => {\n    page.locked = true;\n});\n// Разблокировка страницы при закрытии модального окна\nevents.on('modal:close', () => {\n    page.locked = false;\n});\n// Загрузка каталога товаров при старте приложения\napi.getProductList()\n    .then(appData.setCatalog.bind(appData))\n    .catch(err => {\n    console.log(err);\n});\n"],"names":["LarekAPI","_Api","_inherits","_super","_createSuper","cdn","baseUrl","options","_this","_classCallCheck","call","_createClass","key","value","getProductList","_this2","this","get","then","data","items","map","item","Object","assign","image","getProductItem","id","_this3","concat","orderProducts","order","post","Api","_a","arguments","length","undefined","headers","handleResponse","response","ok","json","Promise","reject","error","statusText","uri","fetch","method","body","JSON","stringify","categoryClasses","PaymentMethods","EventEmitter","_events","Map","on","eventName","callback","has","set","Set","add","off","size","emit","forEach","subscribers","name","RegExp","test","onAll","offAll","trigger","context","event","Model","events","emitChanges","payload","Product","_Model","apply","AppState","_Model2","_super2","basket","payment","address","email","phone","total","formErrors","clearBasket","updateBasket","clearOrder","setCatalog","catalog","setPreview","preview","addToBasket","indexOf","push","removeFromBasket","filter","it","setDeliveryField","field","validateDelivery","setContactField","validateContact","errors","keys","Component","container","toggleClass","element","className","force","classList","toggle","setText","textContent","String","setDisabled","state","setAttribute","removeAttribute","setHidden","style","display","setVisible","removeProperty","setImage","src","alt","render","isSelector","x","ensureElement","selectorElement","elements","ensureAllElements","document","Array","from","querySelectorAll","NodeList","isArray","Error","console","warn","pop","HTMLElement","cloneTemplate","query","content","firstElementChild","cloneNode","setElementData","el","dataset","createElement","tagName","props","children","obj","prototype","getPrototypeOf","_step","_iterator","_createForOfIteratorHelper","s","n","done","child","append","err","e","f","Page","_Component","_counter","_catalog","_wrapper","_basket","addEventListener","_this$_catalog","replaceChildren","_toConsumableArray","remove","Modal","_closeButton","_content","close","bind","_assertThisInitialized","stopPropagation","open","_get","_getPrototypeOf","Card","actions","_title","_price","_image","querySelector","_button","_description","_category","_index","onClick","disablePriceButton","disabled","Number","toString","title","Basket","_list","_total","toggleButton","isDisabled","_this$_list","__rest","t","p","hasOwnProperty","getOwnPropertySymbols","i","propertyIsEnumerable","Form","_isFormValid","_submit","_errors","_emailInput","_phoneInput","target","onInputChange","validateForm","preventDefault","validateEmail","validatePhone","replace","forceValidation","isValid","errorMessage","emailValid","phoneValid","trim","valid","inputs","DeliveryForm","_Form","_cardButton","_cashButton","toggleButtons","namedItem","ContactForm","_Form2","Success","_close","api","cardCatalogTemplate","cardPreviewTemplate","cardBasketTemplate","basketTemplate","deliveryTemplate","contactTemplate","successTemplate","appData","page","modal","delivery","ev","contact","price","category","card","buttonTitle","description","index","reduce","counter","contains","getAttribute","log","values","join","result","success","locked"],"sourceRoot":""}